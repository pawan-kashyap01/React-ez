We have two types of dependencies-> 

1. Dependencies
What They Are: These are packages that your project needs to run in production. They are essential for the application to function correctly.
Installation: When you or someone else installs your project (e.g., via npm install), all dependencies listed under "dependencies" in your package.json file are installed.
Usage: For example, if you're building a web application using Express, you would list Express as a dependency because your app needs it to run.
Example:
{
  "dependencies": {
    "express": "^4.17.1"
  }
}

2. DevDependencies
What They Are: These are packages that are only necessary during the development of your project. They are not needed in the production environment where the application is running.
Installation: These are installed only when running npm install in a development environment. When installing with the --production flag (npm install --production), devDependencies are skipped.
Usage: DevDependencies typically include tools for testing, transpiling, and linting code. For example, if you're using Babel to transpile your JavaScript, or Jest for testing, these would be devDependencies.
Example:
{
  "devDependencies": {
    "jest": "^26.6.3",
    "babel-cli": "^6.26.0"
  }
}

Key Points:
Dependencies are for the code that runs in production.
DevDependencies are for tools and libraries needed during development, testing, and building the project.






Parcel Features Explained
1. HMR (Hot Module Replacement)

What It Is: HMR allows you to see changes in your code instantly in the browser without requiring a full page reload.
How It Works: When you save a file, Parcel detects the change and only updates the specific modules that have changed. This speeds up development by maintaining the state of your application during updates.
2. File Watcher Algorithm

What It Is: This algorithm keeps track of changes in your files and triggers rebuilds or reloads when changes are detected.
Implementation: Parcel's file watcher is implemented in C++, making it highly efficient and capable of handling large projects with many files.
3. Minification

What It Is: Minification reduces the size of your code by removing unnecessary characters (like whitespace, comments) and shortening variable names.
Benefit: This results in smaller files, which load faster and save bandwidth, especially important for production environments.
4. Cleaning Our Code

What It Is: Parcel automatically removes dead code, which is code that is never used or executed in your application.
Benefit: This helps keep your codebase clean, reduces file sizes, and improves performance.
5. DEV and Production Build

What It Is: Parcel can create different builds for development and production environments.
DEV Build: Optimized for speed with features like HMR.
Production Build: Optimized for performance, including minification, dead code elimination, and other optimizations.
6. Super Fast Building Algorithm

What It Is: Parcel uses a highly optimized bundling process, parallelized across multiple cores.
Benefit: This makes the build process extremely fast, even for large projects.
7. Image Optimization

What It Is: Parcel automatically optimizes images by compressing them and converting them to more efficient formats.
Benefit: This reduces the size of images, improving page load times and reducing bandwidth usage.
8. Caching While Development

What It Is: Parcel caches built assets during development to avoid rebuilding unchanged files.
Benefit: This significantly speeds up incremental builds and makes the development process smoother.
9. Compression

What It Is: Parcel can compress your files (e.g., using Gzip or Brotli) to reduce their size for faster delivery to the client.
Benefit: This reduces the amount of data transferred over the network, improving load times.
10. Compatible with Older Versions of Browsers

What It Is: Parcel automatically transpiles and polyfills your code to ensure compatibility with older browsers that donâ€™t support modern JavaScript features.
Benefit: Ensures that your application works across a wide range of browsers, including older ones.
11. HTTPS in Dev

What It Is: Parcel allows you to serve your development server over HTTPS.
Benefit: This is useful for testing features that require HTTPS, such as service workers or secure cookies.
12. Port Number

What It Is: Parcel automatically assigns a port number for your development server, or you can specify one manually.
Benefit: Provides flexibility in setting up your development environment.
13. Consistent Hashing Algorithm

What It Is: Parcel uses a consistent hashing algorithm to generate unique file names for your assets.
Benefit: This ensures that assets are cached correctly and not re-downloaded unless they have changed, improving cache efficiency.
14. Zero Configuration

What It Is: Parcel requires no configuration to get started.
Benefit: You can start a new project without worrying about setting up complex configuration files, making it very beginner-friendly.
15. Automatic Code Splitting

What It Is: Parcel automatically splits your code into smaller bundles, loading only what is needed at a given time.
Benefit: This improves the performance of your application by reducing the initial load time and allowing for better caching of assets.